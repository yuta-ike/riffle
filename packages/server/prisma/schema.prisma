generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()"))
  title               String
  description         String?
  createdAt           DateTime              @default(now())
  authorId            String
  updatedAt           DateTime?             @updatedAt
  deletedAt           DateTime?             @db.Time(6)
  accessLevel         AccessLevel
  category            Category
  User                User                  @relation(fields: [authorId], references: [id])
  Collaborator        Collaborator[]
  CollaboratorRequest CollaboratorRequest[]
  Comment             Comment[]
  InviteCode          InviteCode[]
  OwnedBook           OwnedBook[]
  Word                Word[]
}

model Collaborator {
  id          Int       @id @default(autoincrement())
  role        Role
  joinedAt    DateTime?
  requestedAt DateTime?
  createdAt   DateTime  @default(now())
  bookId      String?
  userId      String
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?
  Book        Book?     @relation(fields: [bookId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
}

model CollaboratorRequest {
  userId    String
  bookId    String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  Book      Book      @relation(fields: [bookId], references: [id])
  User      User      @relation(fields: [userId], references: [id])

  @@id([userId, bookId])
}

model Comment {
  id          String      @id @default(dbgenerated("uuid_generate_v4()"))
  content     String
  commentType CommentType
  createdAt   DateTime    @default(now())
  bookId      String?
  wordId      Int?
  userId      String
  deletedAt   DateTime?
  Book        Book?       @relation(fields: [bookId], references: [id])
  User        User        @relation(fields: [userId], references: [id])
  Word        Word?       @relation(fields: [wordId], references: [id])
  Stamp       Stamp[]
}

model ConnectCode {
  id             Int       @id @default(autoincrement())
  connectCode    String    @default(dbgenerated("uuid_generate_v4()"))
  applyUserId    String
  expireDate     DateTime
  createdAt      DateTime  @default(now())
  deauthorizedAt DateTime?
  appliedUserId  String?
  AppliedUser    User?     @relation("ConnectCode_appliedUserIdToUser", fields: [appliedUserId], references: [id], onDelete: Restrict)
  ApplyUser      User      @relation("ConnectCode_applyUserIdToUser", fields: [applyUserId], references: [id])
}

model Friend {
  applyUserId   String
  appliedUserId String
  createdAt     DateTime  @default(now()) @db.Time(6)
  deletedAt     DateTime?
  AppliedUser   User      @relation("Friend_appliedUserIdToUser", fields: [appliedUserId], references: [id])
  ApplyUser     User      @relation("Friend_applyUserIdToUser", fields: [applyUserId], references: [id])

  @@id([applyUserId, appliedUserId])
}

model InviteCode {
  inviteCode     String    @id @default(dbgenerated("uuid_generate_v4()"))
  inviterUserId  String
  bookId         String
  expireDate     DateTime
  createdAt      DateTime  @default(now())
  deauthorizedAt DateTime?
  inviteeUserId  String?
  accepted       Boolean?
  role           Role
  Book           Book      @relation(fields: [bookId], references: [id])
  InviteeUser    User?     @relation("InviteeUser", fields: [inviteeUserId], references: [id], onDelete: Restrict)
  InviterUser    User      @relation("InviterUser", fields: [inviterUserId], references: [id])
}

model OwnedBook {
  id          Int         @id @default(autoincrement())
  type        BookType
  createdAt   DateTime    @default(now())
  isFavorite  Boolean     @default(false)
  role        Role
  accessLevel AccessLevel
  profileId   String?
  bookId      String
  userId      String
  updatedAt   DateTime?   @updatedAt
  deletedAt   DateTime?
  Book        Book        @relation(fields: [bookId], references: [id])
  User        User        @relation(fields: [userId], references: [id])
}

model Stamp {
  id        Int       @id @default(autoincrement())
  stampType StampType
  createdAt DateTime  @default(now())
  commentId String
  userId    String
  Comment   Comment?  @relation(fields: [commentId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model User {
  id                                          String                @id
  name                                        String
  iconUrl                                     String
  createdAt                                   DateTime              @default(now())
  updatedAt                                   DateTime?             @updatedAt
  deletedAt                                   DateTime?
  Book                                        Book[]
  Collaborator                                Collaborator[]
  CollaboratorRequest                         CollaboratorRequest[]
  Comment                                     Comment[]
  ConnectCode_ConnectCode_appliedUserIdToUser ConnectCode[]         @relation("ConnectCode_appliedUserIdToUser")
  ConnectCode_ConnectCode_applyUserIdToUser   ConnectCode[]         @relation("ConnectCode_applyUserIdToUser")
  Friend_Friend_appliedUserIdToUser           Friend[]              @relation("Friend_appliedUserIdToUser")
  Friend_Friend_applyUserIdToUser             Friend[]              @relation("Friend_applyUserIdToUser")
  OwnedBook                                   OwnedBook[]
  Stamp                                       Stamp[]
  Word                                        Word[]
  WordDetail                                  WordDetail[]
  WordScore                                   WordScore[]
  InviteCode_Invitee                          InviteCode[]          @relation("InviteeUser")
  InviteCode_Inviter                          InviteCode[]          @relation("InviterUser")
}

model Word {
  id         Int          @id @default(autoincrement())
  order      Int          @default(autoincrement())
  question   String
  answer     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  bookId     String?
  userId     String
  deletedAt  DateTime?
  Book       Book?        @relation(fields: [bookId], references: [id])
  User       User         @relation(fields: [userId], references: [id])
  Comment    Comment[]
  WordDetail WordDetail[]
  WordScore  WordScore[]
}

model WordDetail {
  wordId    Int
  done      Boolean
  flags     Int[]
  userId    String
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  User      User      @relation(fields: [userId], references: [id])
  Word      Word      @relation(fields: [wordId], references: [id], map: "WordDetail_id_fkey")

  @@unique([wordId, userId])
}

model WordScore {
  id        Int       @id @default(autoincrement())
  wordId    Int
  result    Boolean
  createdAt DateTime  @default(now())
  userId    String
  deletedAt DateTime?
  User      User      @relation(fields: [userId], references: [id])
  Word      Word      @relation(fields: [wordId], references: [id])
}

enum Category {
  japanese
  math
  science
  social_studies
  english
  toeic
  toefle
}

enum CommentType {
  default
  question
}

enum Role {
  owner
  editor
  viewer
}

enum BookType {
  own
  shared
}

enum AccessLevel {
  full
  meta
  none
}

enum StampType {
  good
  bad
}
